import { expect } from 'vitest'

const idRegexp = /^[a-zA-Z0-9\-_]{21}$/
export const expectedNodes: Record<string, any> = {
  message: {
    id: expect.stringMatching(idRegexp),
    next: expect.stringMatching(idRegexp),
    raw: 'message',
    text: 'message',
    type: 'script',
    variant: 'message',
  },
  script: {
    id: expect.stringMatching(idRegexp),
    next: expect.stringMatching(idRegexp),
    raw: 'script',
    text: 'script',
    type: 'script',
    variant: 'script',
  },
  signalSend: {
    id: expect.stringMatching(idRegexp),
    next: expect.stringMatching(idRegexp),
    raw: 'signal send',
    text: 'signal send',
    type: 'script',
    variant: 'signalSend',
  },
  connector: {
    id: expect.stringMatching(idRegexp),
    next: expect.stringMatching(idRegexp),
    raw: '',
    text: '',
    type: 'connector',
  },
  serviceCall: {
    id: expect.stringMatching(idRegexp),
    next: expect.stringMatching(idRegexp),
    raw: 'service call',
    text: 'service call',
    type: 'serviceCall',
  },
  table: {
    id: expect.stringMatching(idRegexp),
    raw: 'tc-node-table',
    rows: [
      ['tc-node-table', 'Values'],
      ['AAA', 'aaa'],
      ['BBB', 'bbb'],
    ],
    text: 'tc-node-table',
    type: 'table',
  },
  start: {
    id: expect.stringMatching(idRegexp),
    next: expect.stringMatching(idRegexp),
    raw: 'Sub tc-node-start',
    text: 'Sub tc node start',
    type: 'start',
  },
  root: {
    id: expect.stringMatching(idRegexp),
    next: expect.stringMatching(idRegexp),
    raw: 'tc-node-root',
    text: 'tc node root',
    type: 'root',
  },
  end: {
    id: expect.stringMatching(idRegexp),
    raw: 'end',
    text: 'end',
    type: 'end',
  },
  gateway: {
    id: 'Ryxf0HT9ZAB9_dZzS4i9r',
    options: {
      '2ozat9rioNk1bHHPnaHKv': 'b',
      p5MlySj8dCWDQMosWOnaE: 'a',
    },
    raw: 'gateway',
    text: 'gateway',
    type: 'gateway',
    variant: 'gateway',
  },
  loop: {
    id: 'zkzNjSI6slazO3_wMgj9l',
    options: {
      YJj39kN7DStE4nTSVU0xG: expect.stringMatching(/.*/),
    },
    raw: 'loop',
    text: 'loop',
    type: 'gateway',
    variant: 'loop',
  },
  parallel: {
    id: expect.stringMatching(idRegexp),
    options: {
      'NAT-Ocxm5GgwHdnfKlcSv': 'Connector Line',
      _PiHSpFTXJXvWyDvByh2j: 'Connector Line',
    },
    raw: 'parallel',
    text: 'parallel',
    type: 'gateway',
    variant: 'parallel',
  },
  subprocess: {
    extra: expect.anything(),
    id: expect.stringMatching(idRegexp),
    link: expect.stringMatching(idRegexp),
    next: expect.stringMatching(idRegexp),
    raw: 'Sub tc-node-subProcess',
    tableKey: undefined,
    text: 'Sub tc node subProcess',
    type: 'subprocess',
  },
  subprocessTable: {
    extra: expect.anything(),
    id: 'W4viKjvMRH7f5DDi0ykbW',
    link: undefined,
    next: expect.stringMatching(idRegexp),
    raw: 'Table: tc-node-subprocessTable',
    tableKey: 'tc-node-subprocessTable',
    text: 'Table tc node subprocessTable',
    type: 'subprocess',
  },
  subprocessActions: {
    actions: {
      QLkSt7IR3itReFjXCiJny: 'Click A',
      lqqksOsn_js8IbdKIrNVP: 'Click B',
    },
    extra: expect.anything(),
    id: expect.stringMatching(idRegexp),
    next: expect.stringMatching(idRegexp),
    raw: 'tc-node-subprocessActions',
    text: 'tc node subprocessActions',
    type: 'userAction',
    variant: 'subprocess',
  },
  userAction: {
    actions: {
      'BMQqJEY5JHbKdJ-cImK7b': 'Click B',
      Fbxe06SkmW0YXzTPz3MOK: 'Click A',
    },
    extra: expect.anything(),
    id: expect.stringMatching(idRegexp),
    next: expect.stringMatching(idRegexp),
    raw: '',
    text: '',
    type: 'userAction',
    variant: 'userAction',
  },
}
